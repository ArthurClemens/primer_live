{
  "version": 3,
  "sources": ["../../assets/index-js-only.ts", "../../assets/js/prompt.ts"],
  "sourcesContent": ["export * from './js';\n", "type MaybeHTMLElement = HTMLElement | null;\ntype MaybePromptCheckbox = PromptCheckbox | null;\n\ntype PromptCheckbox = {\n  options?: PromptOptions;\n} & HTMLInputElement;\n\ntype PromptElements = {\n  root: HTMLElement;\n  content: HTMLElement;\n  touchLayer?: MaybeHTMLElement;\n  toggle?: MaybeHTMLElement;\n};\n\ntype PromptOptions = {\n  willShow?: (elements?: PromptElements) => void;\n  didShow?: (elements?: PromptElements) => void;\n  willHide?: (elements?: PromptElements) => void;\n  didHide?: (elements?: PromptElements) => void;\n};\n\ntype PromptState = \"showing\" | \"endShowing\" | \"hiding\" | \"endHiding\";\n\nconst ROOT_SELECTOR = \"[data-prompt]\";\nconst WRAPPER_SELECTOR = \"[data-prompt-content]\";\nconst CONTENT_SELECTOR = \"[data-content]\";\nconst TOUCH_LAYER_SELECTOR = \"[data-touch]\";\nconst CHECKBOX_SELECTOR = 'input[type=\"checkbox\"]';\nconst TOGGLE_SELECTOR = \"label\";\nconst IS_MOUNTED_DATA = \"ismounted\";\nconst TOUCH_DATA = \"touch\";\nconst IS_MODAL_DATA = \"ismodal\";\nconst IS_ESCAPABLE_DATA = \"isescapable\";\nconst FOCUS_FIRST_SELECTOR_DATA = \"focusfirst\";\n\nconst isTouchLayer = (el?: MaybeHTMLElement) =>\n  el?.dataset[TOUCH_DATA] !== undefined;\nconst isModal = (el?: MaybeHTMLElement) =>\n  el?.dataset[IS_MODAL_DATA] !== undefined;\nconst isEscapable = (el?: MaybeHTMLElement) =>\n  el?.dataset[IS_ESCAPABLE_DATA] !== undefined;\n\nfunction getCheckboxFromPromptContent(contentElement?: HTMLElement) {\n  const root = contentElement?.closest(ROOT_SELECTOR);\n  if (!root) {\n    return null;\n  }\n  const checkbox: MaybePromptCheckbox = root.querySelector(CHECKBOX_SELECTOR);\n  if (!checkbox) {\n    return null;\n  }\n  return checkbox;\n}\n\nfunction getCheckboxFromSelectorOrElement(\n  selectorOrElement: string | HTMLElement,\n) {\n  let checkbox: HTMLInputElement | null = null;\n  if (typeof selectorOrElement === \"string\") {\n    const element: MaybeHTMLElement = document.querySelector(selectorOrElement);\n    if (element) {\n      checkbox = element.querySelector(CHECKBOX_SELECTOR);\n    }\n  } else {\n    checkbox = getCheckboxFromPromptContent(selectorOrElement);\n  }\n  return checkbox;\n}\n\nfunction getElements(checkbox: HTMLInputElement): PromptElements {\n  const root: MaybeHTMLElement = checkbox.closest(ROOT_SELECTOR);\n\n  if (!root) {\n    throw new Error(`Prompt element ${ROOT_SELECTOR} not found`);\n  }\n\n  const wrapper: MaybeHTMLElement =\n    root?.querySelector(WRAPPER_SELECTOR) || null;\n  if (!wrapper) {\n    throw new Error(\"Prompt element 'data-prompt-content' not found\");\n  }\n\n  const content: MaybeHTMLElement = wrapper?.querySelector(CONTENT_SELECTOR);\n  if (!content) {\n    throw new Error(`Prompt element ${CONTENT_SELECTOR} not found`);\n  }\n\n  const touchLayer: MaybeHTMLElement =\n    wrapper?.querySelector(TOUCH_LAYER_SELECTOR) || null;\n  const toggle: MaybeHTMLElement = root?.querySelector(TOGGLE_SELECTOR) || null;\n\n  return {\n    root,\n    touchLayer,\n    content,\n    toggle,\n  };\n}\n\nfunction setCheckboxState({\n  checkbox,\n  state,\n  elements,\n  options,\n  onDidShow,\n}: {\n  checkbox: HTMLInputElement;\n  state: PromptState;\n  elements: PromptElements;\n  options: PromptOptions;\n  onDidShow?: (elements: PromptElements) => void;\n}) {\n  switch (state) {\n    case \"showing\":\n      delete checkbox.dataset.ishiding;\n      if (options.willShow) {\n        options.willShow(elements);\n      }\n      break;\n    case \"endShowing\":\n      if (onDidShow) {\n        onDidShow(elements);\n      }\n      if (options.didShow) {\n        options.didShow(elements);\n      }\n      break;\n    case \"hiding\":\n      checkbox.checked = false;\n      checkbox.dataset.ishiding = \"true\";\n      if (options.willHide) {\n        options.willHide(elements);\n      }\n      break;\n    case \"endHiding\":\n      delete checkbox.dataset.ishiding;\n      if (options.didHide) {\n        options.didHide(elements);\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nfunction closeFromTouchLayer(evt: MouseEvent) {\n  if (!evt.target) {\n    return;\n  }\n  const touchLayer: HTMLElement = evt.target as HTMLElement;\n  if (\n    touchLayer &&\n    touchLayer instanceof HTMLElement &&\n    !isTouchLayer(touchLayer)\n  ) {\n    return;\n  }\n  const root = touchLayer.closest(ROOT_SELECTOR);\n  if (root && root instanceof HTMLElement && isModal(root)) {\n    return;\n  }\n  getCheckboxFromSelectorOrElement(touchLayer)?.click();\n}\n\nfunction closeFromEscapeKey(evt: KeyboardEvent) {\n  if (evt.key === \"Escape\") {\n    // Only close the top element if its root dataset contains \"is escapable\" data attr\n    const openPromptCheckboxes = Array.from(\n      document.querySelectorAll(\n        `${ROOT_SELECTOR} > ${CHECKBOX_SELECTOR}:checked`,\n      ),\n    );\n    const topCheckbox = openPromptCheckboxes.reverse()[0];\n\n    if (topCheckbox instanceof HTMLElement) {\n      const root: MaybeHTMLElement = topCheckbox.closest(ROOT_SELECTOR);\n      if (isEscapable(root)) {\n        topCheckbox.click();\n      }\n    }\n  }\n}\n\nfunction onEndShowing({ root }: PromptElements) {\n  const content: MaybeHTMLElement = root.querySelector(CONTENT_SELECTOR);\n  if (!content) {\n    return;\n  }\n  handleFocus(root, content);\n}\n\nfunction handleFocus(root: HTMLElement, content: HTMLElement) {\n  const focusFirstSelector = root.dataset[FOCUS_FIRST_SELECTOR_DATA];\n  if (focusFirstSelector) {\n    const firstFocusable: HTMLElement | null =\n      content.querySelector(focusFirstSelector);\n    if (firstFocusable) {\n      firstFocusable.focus();\n    }\n  }\n}\n\nfunction onToggle(\n  selectorOrElement: string | HTMLElement,\n  mode: \"show\" | \"hide\" | \"toggle\",\n  options?: PromptOptions,\n) {\n  const checkbox: MaybePromptCheckbox =\n    getCheckboxFromSelectorOrElement(selectorOrElement);\n  if (checkbox) {\n    if (checkbox.checked && mode === \"show\") {\n      return;\n    }\n    if (!checkbox.checked && mode === \"hide\") {\n      return;\n    }\n    if (options) {\n      checkbox.options = options;\n    }\n    checkbox.click();\n  }\n}\n\ntype TPrompt = {\n  el?: MaybeHTMLElement;\n  checkbox?: MaybePromptCheckbox;\n  isInited: boolean;\n  init: (isMounting?: boolean) => void;\n  mounted: () => void;\n  updated: () => void;\n  destroyed: () => void;\n  hide: (selectorOrElement: string | HTMLElement) => void;\n  show: (selectorOrElement: string | HTMLElement) => void;\n  toggle: (selectorOrElement: string | HTMLElement) => void;\n  change: (\n    selectorOrElement: string | HTMLElement,\n    options?: PromptOptions,\n  ) => void;\n};\n\nfunction handleToggleEvent(event: CustomEvent) {\n  const target: EventTarget | null = event.target;\n  if (!(target instanceof HTMLElement)) {\n    return;\n  }\n  const checkbox = getCheckboxFromSelectorOrElement(target);\n  if (!checkbox || !(checkbox instanceof HTMLInputElement)) {\n    return;\n  }\n\n  const actionDispatch = {\n    show: Prompt.show,\n    hide: Prompt.hide,\n  };\n\n  const action: \"show\" | \"hide\" = event.detail.action;\n  if (action) {\n    setTimeout(() => {\n      actionDispatch[action](target);\n    }, 0);\n  }\n}\n\nexport const Prompt: TPrompt = {\n  isInited: false,\n  init: function (isMounting) {\n    if (this.el && isMounting) {\n      window.addEventListener(\"keydown\", closeFromEscapeKey);\n      this.el.addEventListener(\"prompt:toggle\", handleToggleEvent);\n      Prompt.isInited = true;\n      const checkbox = getCheckboxFromSelectorOrElement(this.el);\n      if (checkbox) {\n        checkbox.dataset[IS_MOUNTED_DATA] = \"true\";\n      }\n    }\n  },\n  mounted: function () {\n    this.init(true);\n  },\n  updated: function () {\n    this.init();\n  },\n  destroyed: function () {\n    this.el?.removeEventListener(\"prompt:toggle\", handleToggleEvent);\n  },\n  change: function (\n    selectorOrElement: string | HTMLElement,\n    options: PromptOptions = {},\n  ) {\n    const checkbox = getCheckboxFromSelectorOrElement(selectorOrElement);\n    if (!checkbox || !(checkbox instanceof HTMLInputElement)) {\n      return;\n    }\n\n    const elements = getElements(checkbox);\n\n    if (checkbox.checked) {\n      elements.touchLayer?.addEventListener(\"click\", closeFromTouchLayer);\n    } else {\n      elements.touchLayer?.removeEventListener(\"click\", closeFromTouchLayer);\n    }\n\n    checkbox.addEventListener(\n      \"transitionend\",\n      function (_evt) {\n        setCheckboxState({\n          checkbox,\n          state: checkbox.checked ? \"endShowing\" : \"endHiding\",\n          elements,\n          options,\n          onDidShow: onEndShowing,\n        });\n      },\n      { once: true },\n    );\n\n    setCheckboxState({\n      checkbox,\n      state: checkbox.checked ? \"showing\" : \"hiding\",\n      elements,\n      options,\n    });\n  },\n  hide: function (selectorOrElement: string | HTMLElement) {\n    if (typeof selectorOrElement !== \"string\") {\n      // Element\n      let element = selectorOrElement;\n      const root: MaybeHTMLElement = element.closest(ROOT_SELECTOR);\n      if (isTouchLayer(element)) {\n        // Clicked touch layer\n        if (isModal(root)) {\n          // Ignore\n          return;\n        }\n      }\n    }\n    onToggle(selectorOrElement, \"hide\");\n  },\n  show: function (selectorOrElement: string | HTMLElement) {\n    onToggle(selectorOrElement, \"show\");\n  },\n  toggle: function (selectorOrElement: string | HTMLElement) {\n    onToggle(selectorOrElement, \"toggle\");\n  },\n};\n\ndeclare global {\n  interface Window {\n    Prompt?: typeof Prompt;\n  }\n}\n\nif (typeof window !== \"undefined\") {\n  window.Prompt = Prompt;\n}\n"],
  "mappings": "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",
  "names": []
}
